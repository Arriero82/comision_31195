WEBPACK : src/index.js

REACT : 

REACT-DOM :
REACT-NATIVE : 
ELECTON : 




Las aplicaciones de React se forman por uno o mas componentes : 

1- Todos los componentes de React son Funciones
2- Siempre arrancan en Mayuscula
3- Todos los componentes tienen retorno
4- Los componentes pueden retornar un UNICO elemento
5- Todos pueden recibir props
6- Todos pueden tener un estado






const Foo = () => {}

function Foo(){}


JSX : JS and XML


function foo(){}


foo()   ===    <foo />


HOOKS : Son funciones que incorporan nuevas herramientas en un componente, como por ejemplo la capacidad de tener estado, ciclos de vida, etc...


1) Solo van adentro de un componente
2) No pueden estar en condiciones ni bucles
3) Todos son funciones entonces se ejecutan



Crear el componente ItemCount que tiene que estar dentro de ItemListContainer y tiene que tener un texto con 3 botones, aumentar - disminuir y confirmar y poder recibir 3 props : stock (numero) - initial(numero) y onAdd (funcion)


app -
    |_ navbar
      |_ widget
    |_ itemListContainer
      |_itemCount



OPERADOR TERNARIO 

(condición) ? (si se cumple) : (si no se cumple)

condición ? hace esto if true : esto if false


condición ? retorna esto if true : o esto if false


const a = true ? console.log("Hola") : 2

const a = if(true){ console.log("Hola") } else { return 2 }






SENTENCIA Y EXPRESIONES


const a = 1;

console.log("Hola");


const a = 1+1;


const arr = [1,2,3]
const aux = []
arr.forEach()

const aux = arr.map()



function foo(){

}

const a = foo() // a = undefined


IIFE : Imediatly Invoked Function Expression / Funciones autoinvocadas




(function(){
  
})()



class App extends Component {

  constructor(){}

  render() {}

  componentDidMount() {}

  componentDidUpdate() {}

  componentWillUnmount() {}


}




const Usuarios = () => {

  const cargando = useState(true)

  useEffect(()=>{
    //ya consegui los usuarios!
  })

  if(cargando){
    return (
      <ul>
        cargando...
      </ul>  
    )
  }else{
    return (
      usuarios...
    )
  }
}


1ER CICLO DE VIDA :
1- Carga Usuarios
2- Crea el estado por primera vez (con true)
3- Se evalua por primera vez el condicional 
4- Se muestra cargando (renderizado)
5- Se activa el efecto
6- Modifico el estado


2DO CICLO DE VIDA :
1- Carga Usuarios
2- Se cambia el valor a false del estado
3- Se evalua el condicional de nuevo , ahora cae en el else porque el estado es false
4- Se vuelve a ejecutar el efecto



PATRON CONTAINER 



Promise

const promesa = new Promise((res,rej)=>{})


promesa.then(()=>{})
promesa.catch(()=>{})